#include <stdio.h>
#include <stdlib.h>

#define MAX_TERMS 10000 /* size of array "terms" */
typedef struct {
    float coef;
    int expon;
} polynomial;
polynomial terms[MAX_TERMS];
int avail = 0;

void padd(int, int, int, int, int*, int*);
void attach(float, int);
int compare(int, int);

/*int main()
{
    int startD, finishD;
    int i=0;
    while(getc(stdin) == ' ')
    {
        scanf("%d", terms[i].coef);
        
    }
}*/

void padd(int startA, int finishA, int startB, int finishB, int *startD, int *finishD)
{
    /* A(x) + B(x) = D(x) */
    float coefficient;
    *startD = avail;
    
    while(startA <= finishA && startB <= finishB)
    {
        switch(compare(terms[startA].expon, terms[startB].expon))
        {
            case -1:
                attach(terms[startB].coef, terms[startB].expon);
                startB++;
                break;
            
            case 0:
                coefficient = terms[startA].coef + terms[startB].coef;
                if(coefficient)
                    attach(coefficient, terms[startA].expon);
                startA++;   startB++;
                break;
                
            case 1:
                attach(terms[startA].coef, terms[startA].expon);
                startA++;
        }
    }
    
    /* attach the other terms of A(x) */
    for(; startA <= finishA ; startA++)
        attach(terms[startA].coef, terms[startA].expon);
        
    /* attach the other terms of B(x) */
    for(; startB <= finishB ; startB++)
        attach(terms[startB].coef, terms[startB].expon);
    
    *finishD = avail - 1;
}

void attach(float coefficient, int exponent)
{
    if(avail >= MAX_TERMS)
    {
        fprintf(stderr, "There are too many terms in the polynomial.\n");
        exit(1);
    }
    
    terms[avail].coef = coefficient;
    terms[avail++].expon = exponent;
}

int compare(int x, int y)
{
    if(x > y)
        return 1;
    else if (x == y)
        return 0;
    else
        return -1;
}
